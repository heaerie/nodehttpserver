var express = require('express');
var session = require('express-session');
var bodyParser = require('body-parser');
var requestIp = require('request-ip');
var useragent = require('useragent');
var geoip = require('geoip-lite');
var cookieParser  = require('cookie-parser');

var device     = require('express-device')
var ms     = require('ms');

var secretkey ="KEY1";
var sessionExpSec =60*15;

var jwt = require('jsonwebtoken');


 Promise = require('bluebird'),
 request = Promise.promisify(require('request'));

var app = express();

var https = require('https');
var http = require('http');
var fs = require('fs');

/*--- Invoke DB --*/

var log                 = require('./libs/log')(module);


app.use(bodyParser.urlencoded({ extended: false }));
app.use(device.capture());
app.set('view options', { layout: true });
device.enableViewRouting(app);
app.use(cookieParser());
app.use(session({secret: 'glbladmin',
resave: false,
saveUninitialized: true
}));
var sess ;
console.log(new Date());
/*[]
app.use(multer({ dest: './uploads/',
 rename: function (fieldname, filename) {
    return filename+Date.now();
  },
onFileUploadStart: function (file) {
  console.log(file.originalname + ' is starting ...')
},
onFileUploadComplete: function (file) {
  console.log(file.fieldname + ' uploaded to  ' + file.path)
  done=true;
}
}));

*/



function dbError(err)
{
	console.log(err);
}





var chkpwd=0, username="durai145@live.in" ,password ="1qaz2wsx" ; 


checkpwd( username,password, function( result,response, record ){

  console.log( "Return:" +result );
  console.log( "Response:" +response );
//  console.log( "record:" + record );
});

    
// setup sample data - wouldn't actually use this in production




//setTimeout(function() {
 //   mongoose.disconnect();
//}, 3000);
//app.use(bodyParser.urlencoded);




app.all('*', function(req, res, next)
{

var agent = useragent.parse(req.headers['user-agent']);
var geo = geoip.lookup(requestIp.getClientIp(req));
//agent.os.toString(); // 'Mac OSX 10.8.1'

var browser ="";
if( useragent.is(req.headers['user-agent']).chrome == true)
{
	browser ="CHROME";
}
else if( useragent.is(req.headers['user-agent']).firefox == true)
{
	browser +="FIREFOX";
}
else if( useragent.is(req.headers['user-agent']).ie  == true)
{
	browser +="IE";
}
else if( useragent.is(req.headers['user-agent']).mobile_safari  == true)
{
	browser +="MOBILE_SAFARI";
}
else if( useragent.is(req.headers['user-agent']).mozilla  == true)
{
	browser +="MOZILLA";
}
else if( useragent.is(req.headers['user-agent']).opera  == true)
{
	browser +="OPERA";
}
else if( useragent.is(req.headers['user-agent']).safari  == true)
{
	browser +="SAFARI";
}
else if( useragent.is(req.headers['user-agent']).webkit  == true)
{
	browser +="WEBKIT";
}
else if( useragent.is(req.headers['user-agent']).android  == true)
{
	browser +="ANDROID";
}
browser += " " + useragent.is(req.headers['user-agent']).version;


//console.log("BROWSER = " +  browser);
//console.log("OS      = " + agent.os.toString());
//console.log("Device  = " + agent.device.toString());
if ( geo == null)
{

	geo={
		country:'NA'
		,city:'NA'
		,region:'NA'
	   };
}



var BrowserInfo=
{
 BRWSR_NAME 		: browser
,DEVICE 		: agent.device.toString()
,OS 			: agent.os.toString()
,LOGIN_DATE 		: ''
,LOGOUT_DATE 		: ''
,LOGIN_STATUS 		: ''
,LOGIN_DESRC 		: ''
,CLIENT_IP 		: requestIp.getClientIp(req) 
,CLIENT_HOST 		: requestIp.getClientIp(req)
,GEO_COUNTRY 		: geo.country
,LANG 			: ''
,USR_ID 		: ''
,GRP_ID 		: ''
,PROD_ID 		: ''
,GEO_CITY 		: geo.city
,GEO_DTL 		: req.headers['user-agent']
,GEO_REGION 		: geo.region
};

res.locals.BrowserInfo  = BrowserInfo;
		




		next();

});   





// parse application/json
app.use(bodyParser.json());

app.set('view engine', 'ejs');

app.get('/hello.txt', function(req, res){
  res.send('Hello World');
});
app.post('/GenTool/GenJson_21.html' , function(req,res) {

res.redirect('GenTool/GenJson_21.html');

}
);

app.post('/jsonSchema/:sjson' , function(req,res) {

});











console.log( "login get" );
sess=req.session;
if(sess.email)
{
res.write(' <h1>Hello '+sess.email+'</h1> ');
res.end('<a href="#">Logout</a>');
}
else
{
		console.log( req );
	if( req.body.email != null  )
	{
		res.write('<h1>successfull login.</h1> ');
		sess.email=req.body.email;
	}
	else
	{
		res.write('<h1>Please login first.</h1> ');
		res.end('<a href="/">Login</a>');
	}
}

});

/*[
app.post('/glbladmin/service/Religion', function(req, res){
  console.log("#######Religion########");
  console.log(req);
  console.log(req.params);
  console.log(req.body);
  console.log(req.USRID);
  res.send('<select class="ctext" name="' + req.params.id + '" +> <option> --none-- </option>  <option>' + req.params.id  + '</option> </select>' );
});

]*/
app.post('/glbladmin/service/:id', function(req, res){

/*[
{ USRID: '1',
  GROUPID: '1',
  class: 'ctext',
  name: 'Religion',
  xml: 'N',
  mndf: 'N',
  datatype: 'VARCHAR',
  htmltype: 'DIV',
  id: 'religion',
  errorbox: 'religionErrorBox',
  label: 'Religion',
  title: '',
  onchange: 'onChange(this)',
  onclick: 'onClick(this)',
  onblure: 'undefined',
  onkeydown: 'onKeyDown(this)',
  onkeyup: 'onKeyUp(this)',
  onkeypress: 'onKeyPress(this)',
  task: 'NONE' }

]*/

//  console.log(req.body.USRID);

var respStr= '<select      class="ctext '+ req.body.class      + '" '
                +'        xml="'+ req.body.xml        + '" ' 
                +'       mndf="'+ req.body.mndf       + '" '
                +'   datatype="'+ "LIST"  + '" '
                +'   htmltype="'+ req.body.htmltype   + '" '
                +'         id="'+ req.body.name       + '" '
                +'   errorbox="'+ req.body.name +"ErrorBox"   + '" '
                +'      label="'+ req.body.label      + '" '
                +'      title="'+ req.body.title      + '" '
                +'   onchange="'+ req.body.onchange   + '" '
                +'    onclick="'+ req.body.onclick    + '" '
                +'    onblure="'+ req.body.onblure    + '" '
                +'  onkeydown="'+ req.body.onkeydown  + '" '
                +'    onkeyup="'+ req.body.onkeyup    + '" '
                +' onkeypress="'+ req.body.onkeypress + '" '
                +'       task="'+ req.body.task       + '" >'
                +' <option value=""    id="'+req.body.name+'"> </option>' 
                +' <option value="1"    id="'+req.body.name+'"> '+ req.body.name+'</option>' 
                +' </select>';
	res.send(respStr);

});


app.post('/service/:id', function(req, res){

/*[
{ USRID: '1',
  GROUPID: '1',
  class: 'ctext',
  name: 'Religion',
  xml: 'N',
  mndf: 'N',
  datatype: 'VARCHAR',
  htmltype: 'DIV',
  id: 'religion',
  errorbox: 'religionErrorBox',
  label: 'Religion',
  title: '',
  onchange: 'onChange(this)',
  onclick: 'onClick(this)',
  onblure: 'undefined',
  onkeydown: 'onKeyDown(this)',
  onkeyup: 'onKeyUp(this)',
  onkeypress: 'onKeyPress(this)',
  task: 'NONE' }

]*/

//  console.log(req.body.USRID);

var respStr= '<select      class="ctext '+ req.body.class      + '" '
                +'        xml="'+ req.body.xml        + '" ' 
                +'       mndf="'+ req.body.mndf       + '" '
                +'   datatype="'+ "LIST"  + '" '
                +'   htmltype="'+ req.body.htmltype   + '" '
                +'         id="'+ req.body.name       + '" '
                +'   errorbox="'+ req.body.name +"ErrorBox"   + '" '
                +'      label="'+ req.body.label      + '" '
                +'      title="'+ req.body.title      + '" '
                +'   onchange="'+ req.body.onchange   + '" '
                +'   ng-model="$'+ req.body.parent  +""+req.body.name   + '" '
                +'    onclick="'+ req.body.onclick    + '" '
                +'    onblure="'+ req.body.onblure    + '" '
                +'  onkeydown="'+ req.body.onkeydown  + '" '
                +'    onkeyup="'+ req.body.onkeyup    + '" '
                +' onkeypress="'+ req.body.onkeypress + '" '
                +'       task="'+ req.body.task       + '" >'
                +' <option value=""    id="'+req.body.name+'"> </option>' 
                +' <option value="1"    id="'+req.body.name+'"> '+ req.body.name+'</option>' 
                +' </select>';
	res.send(respStr);

});



app.get('/glbladmin/pages/logout',function(req,res){
req.session.destroy(function(err){
if(err){
console.log(err);
}
else
{
res.redirect('/');
}
});
});
app.get('/logout',function(req,res){
req.session.destroy(function(err){
if(err){
console.log(err);
}
else
{
res.redirect('/');
}
});
});

app.post('/myws',function(req, res){
	console.log(req.body);	
	res.send('['+req.body['filename']+']');
	res.sendFile(__dirname+'/mids/'+req.body.filename);
});

app.post('/api/photo',function(req,res){
  if(done==true){
    console.log(req.files);
    res.end("File uploaded.");
  }
});

///token start


function addCoreFunction(req,callback)
{

	req.getHeader=function(arg)
	{

		var retVal="";
		try
		{
			retVal=req.headers[arg]
		}
		catch(e)
		{

			retVal="";
		}
		return retVal;

	}

	req.setHeader=function(arg,value)
	{

		
		try
		{
			req.headers[arg]=value;
		}
		catch(e)
		{

			retVal="";
		}
		//return retVal;

	}


	req.getParam = function(arg)
	{
		var retVal="";
		if(req.method == "POST")
		{
			try
			{
				retVal=req.params[arg] || req.body[arg]  ;	
			}
			catch(e)
			{
				retVal="";
			}
			
		}
		else if (req.method == "GET")
		{

			try
			{
				retVal=req.query[arg]  || req.body[arg];	
			}
			catch(e)
			{
				retVal="";
			}

		}
		return retVal;
	}


	callback(req);

}



function validInput(req,callback)
{


	addCoreFunction(req,function(req){

	//var contentType = response.getHeader('content-type');

	//console.log(req);
   var accessToken=	req.getHeader("x-access-token");

   var grantType=req.getParam("grantType");
   var clientId=req.getParam("clientId");
   var scope=req.getParam("scope");
   var state =req.getHeader("user-agent");

   var respObj= {
   	 respCode : 0
   	,respDescr :""
   	,accessToken :accessToken
   	,userName    :""
   	,error : ""
   	,grantType : ""
   	,isAccessTokenFound : false
   	,clientId :""
   	,isClientIdFound: false
   	,isValidGrantType : false
   	,isScopeFound: false
   	,redirectURI :""
   	,scope:""
   	,state: ""
   };

   respObj.state=state;
   if(respObj.accessToken != null)
   {
   	respObj.isAccessTokenFound = true; 
   }



	/*need To be introduce table*/

	if(grantType == "password")
	{
	 respObj.isValidGrantType = true;
	 respObj.grantType=grantType;
		
	}
	else
	{
		respObj.respCode=1;
		respObj.grantType=grantType;
		respObj.error="Invalid Grant Type";
	}
	if(clientId == "CLIENTSP")
	{
	 
	 respObj.isClientIdFound = true;
	 respObj.clientId=clientId;
		
	}
	else
	{
		
		respObj.respCode=2;

		 respObj.clientId=clientId;
		respObj.error="Invalid Client Id";
	}
	if(scope == "GSA")
	{
	 respObj.isScopeFound = true;
	 respObj.SCOPE=scope;
		
	}
	else
	{
		respObj.respCode=3;
		respObj.SCOPE=scope;
		respObj.error="Invalid Scope";
	}

     
    


	//res.respObj= respObj;
	log.info("in validate input :resp OBJ:")
	console.log(respObj);

	log.info("-------------:")
	console.log(req);
	callback(req,respObj);

});
   
}



function authvalidInput(req,callback)
{


	addCoreFunction(req,function(req){

	//var contentType = response.getHeader('content-type');

	console.log(req);
   var accessToken=	req.getHeader("x-access-token");

   var grantType=req.getParam("grantType");
   var clientId=req.getParam("clientId");
   var scope=req.getParam("scope");
   var state =req.getHeader("user-agent");

   var respObj= {
   	 respCode : 0
   	,respDescr :""
   	,accessToken :accessToken
   	,userName    :""
   	,error : ""
   	,grantType : ""
   	,isAccessTokenFound : false
   	,clientId :""
   	,isClientIdFound: false
   	,isValidGrantType : false
   	,isScopeFound: false
   	,redirectURI :""
   	,scope:""
   	,state: ""
   };

   respObj.state=state;
   if(respObj.accessToken != null)
   {
   	respObj.isAccessTokenFound = true; 
   }



	/*need To be introduce table*/

	if(grantType == "password")
	{
	 respObj.isValidGrantType = true;
	 respObj.grantType=grantType;
		
	}
	else
	{
		respObj.respCode=1;
		respObj.grantType=grantType;
		respObj.error="Invalid Grant Type";
	}
	if(clientId == "CLIENTSP")
	{
	 
	 respObj.isClientIdFound = true;
	 respObj.clientId=clientId;
		
	}
	else
	{
		
		respObj.respCode=2;

		 respObj.clientId=clientId;
		respObj.error="Invalid Client Id";
	}
	if(scope == "GSA")
	{
	 respObj.isScopeFound = true;
	 respObj.SCOPE=scope;
		
	}
	else
	{
		respObj.respCode=3;
		respObj.SCOPE=scope;
		respObj.error="Invalid Scope";
	}

     
    


	//res.respObj= respObj;
	log.info("in validate input :resp OBJ:")
	console.log(respObj);

	callback(req,respObj);

});
   
}



function clientValidInput(req,callback)
{


	addCoreFunction(req,function(req){

	//var contentType = response.getHeader('content-type');

	//console.log(req);
   var accessToken=	req.getHeader("x-access-token");

   var grantType=req.getParam("grantType");
   var clientId=req.getParam("clientId");
   var scope=req.getParam("scope");
   var state =req.getHeader("user-agent");

   var respObj= {
   	 respCode : 0
   	,respDescr :""
   	,accessToken :accessToken
   	,userName    :""
   	,error : ""
   	,grantType : true
   	,isAccessTokenFound : true
   	,clientId :""
   	,isClientIdFound: false
   	,isValidGrantType : true
   	,isScopeFound: true
   	,redirectURI :""
   	,scope:""
   	,state: ""
   };

   respObj.state=state;
   if(respObj.accessToken != null)
   {
   	respObj.isAccessTokenFound = true; 
   }



	/*need To be introduce table*/
/*
	if(grantType == "password")
	{
	 respObj.isValidGrantType = true;
	 respObj.grantType=grantType;
		
	}
	else
	{
		respObj.respCode=1;
		respObj.grantType=grantType;
		respObj.error="Invalid Grant Type";
	}
	*/
	if(clientId == "CLIENTSP")
	{
	 
	 respObj.isClientIdFound = true;
	 respObj.clientId=clientId;
		
	}
	else
	{
		
		respObj.respCode=2;

		 respObj.clientId=clientId;
		respObj.error="Invalid Client Id";
	}
	/*
	if(scope == "GSA")
	{
	 respObj.isScopeFound = true;
	 respObj.SCOPE=scope;
		
	}
	else
	{
		respObj.respCode=3;
		respObj.SCOPE=scope;
		respObj.error="Invalid Scope";
	}

     
    */


	//res.respObj= respObj;
	log.info("in validate input :resp OBJ:")
	console.log(respObj);

	callback(req,respObj);

});

}

function signToken(res,secretkey,callback)
{

	var payload={
		 iss: "Heaerie GSL"
		,aud: "www.myroomexpense.com"
		,iat: ms(sessionExpSec)

		};


//jwt.setExpiration(new Date().getTime() + ms(60));
var token = jwt.sign(payload, secretkey,{complete: true, maxAge:ms(sessionExpSec), expiresInMinutes: sessionExpSec/60});

	res.setHeader("x-access-token",token );
	callback(res);
}


function verifyToken(accessToken,secretkey,callback)
{


	
var rslt=false;
try
{

log.info("in verifyToken");
var token = jwt.verify(accessToken,secretkey );
rslt=true;

}
catch(e)
{
	rslt=false;
	token={};
}

log.info("in verifyToken:token");
console.log(token);
callback(rslt,token);
}

function token(req,res)
{

//res.setHeader("x-access-token","tests" );
	log.info("in token :001");
	var successRespObj={
		token_type:"jwt"

	};
	var errorArr=[
"invalid_request"
,"unauthorized_client"
,"access_denied"
,"unsupported_response_type"
,"invalid_scope"
,"server_error"
,"temporarily_unavailable"
];
	var errorRespObj={
		error : ""
		,error_uri:""
	};

	log.info("in token :002");
	validInput(req, function(req,respObj)
	{
		log.info("AF:001:validInput ");
		console.log(res.respObj);
		
		if (respObj.respCode == 0)
		{

				var username=req.getParam("username");
				var password=req.getParam("password");


				//log.info("userName:" + username);
				//log.info("password:" + password);
				

				doLogin( username,password, function( result,chkRespMessage, logindata ){


						if(result ==false)
						{

							res.respObj=4;
							res.error="Access Denied";
							log.info("af : 001 : checkpwd");
							//res.statusCode =302;
							//res.end(302,JSON.stringify(res.respObj));
							errorRespObj.error=errorArr[2];
							res.statusCode=304;										
							res.send(JSON.stringify(errorRespObj));								
							
						}
						else
						{
							log.info("T:001:Sign Token");

							

							var entitlement=[
								{
  								'link' :'dashboard'
								,'linkName' :'Home'
								,'uid' :'dashboard'
								, 'dataType' :'CONTAINER'
								, 'child' : [ 
										{
										'link' :'dashboard'
										,'linkName' :'Dashboard'
										,'uid'  :'dashboard2'
										, 'dataType' :'NODE'
										,'child'  : []
										}
										,
										{
										'link' :'basicDetUSSAdd'

										,'linkName' :'Basic Details'
										,'uid'  :'basicDetUSSAdd'
										, 'dataType' :'NODE'
										,'child'  : []
										}

									]
								}
								,
								{
  								'link' :'group'
								,'linkName' :'Group Service'
								,'uid' :'groupservice'
								, 'dataType' :'CONTAINER'
								, 'child' : [ 
										{
										'link' :'groupUSSView'
										,'linkName' :'Group'
										,'uid'  :'group'
										, 'dataType' :'NODE'
										,'child'  : []
										}
										,
										{
										'link' :'rollUSSView'
										,'linkName' :'Roll Details'
										,'uid'  :'SchemaGenerator'
										, 'dataType' :'NODE'
										,'child'  : []
										}

									]
								}
								,
								{
  								'link' :'admin'
								,'linkName' :'Admin Service'
								,'uid' :'admin'
								, 'dataType' :'CONTAINER'
								, 'child' : [ 
										{
										'link' :'SchemaGenerator'
										,'linkName' :'Schema Generator'
										,'uid'  :'SchemaGenerator'
										, 'dataType' :'NODE'
										,'child'  : []
										}
										,
										{
										'link' :'SchemaGeneratorView'
										,'linkName' :'Schema Generator View'
										,'uid'  :'SchemaGenerator'
										, 'dataType' :'NODE'
										,'child'  : []
										},
										{
										'link' :'KeyBoard'
										,'linkName' :'Documents'
										,'uid'  :'KeyBoard'
										, 'dataType' :'NODE'
										,'child'  : []
										}

									]
								}
							];
							/*successRespObj.entitlement= {entitle : 'dashboard'};*/
							successRespObj.entitlement= entitlement;
							successRespObj.logindata= logindata;
/*
							getGroupNav( logindata[0].USR_ID, function (result,respMessage, grpdata  ) 
						{
							log.info('in after  getGroupNav T:001 ');
							console.log(result);
							if( result ) 
							{
								log.info('in after  getGroupNav T:002 ');

								successRespObj.entitlement= {entitle : 'dashboard1'};
								
							
							}
							else
							{

								log.info('in after  getGroupNav T:005 ');
								successRespObj.entitlement= {entitle : 'dashboard2'};

								
							}
							
								log.info('in after  getGroupNav T:006 ');
								

						});
*/
								log.info('send response S001');

								signToken(res,secretkey, function(res){
								
								log.error('send response');
								res.send(JSON.stringify(successRespObj));	
							});

						

							

						}

				});

				

	
		}
		else
		{

				if(respObj.isClientIdFound == false)
							{
								errorRespObj.error=errorArr[1];
							}
							else if (respObj.isValidGrantType ==false)
							{
								errorRespObj.error=errorArr[0];
							
							}

				errorRespObj.error=errorArr[3];
							res.statusCode=302;										
							res.send(JSON.stringify(errorRespObj));
							//res.send(JSON.stringify(res.respObj));

		}
		


	});



}



function validInputSSO(req,callback)
{


	addCoreFunction(req,function(req){

	//var contentType = response.getHeader('content-type');

	//console.log(req);
   var accessToken=	req.getHeader("x-access-token");

   var grantType=req.getParam("grantType");
   var clientId=req.getParam("clientId");
   var scope=req.getParam("scope");
   var state =req.getHeader("user-agent");

   var respObj= {
   	 respCode : 0
   	,respDescr :""
   	,accessToken :accessToken
   	,userName    :""
   	,error : ""
   	,grantType : grantType
   	,isAccessTokenFound : false
   	,clientId :clientId
   	,isClientIdFound: false
   	,isValidGrantType : false
   	,isScopeFound: false
   	,redirectURI :""
   	,scope:scope
   	,state: state
   };

   respObj.state=state;
   if(respObj.accessToken != null)
   {
   	respObj.isAccessTokenFound = true; 
   }



	/*need To be introduce table*/
/*[
	if(grantType == "password")
	{
	 respObj.isValidGrantType = true;
	 respObj.grantType=grantType;
		
	}
	else
	{
		respObj.respCode=1;
		respObj.grantType=grantType;
		respObj.error="Invalid Grant Type";
	}
	if(clientId == "CLIENTSP")
	{
	 
	 respObj.isClientIdFound = true;
	 respObj.clientId=clientId;
		
	}
	else
	{
		
		respObj.respCode=2;

		 respObj.clientId=clientId;
		respObj.error="Invalid Client Id";
	}
	if(scope == "GSA")
	{
	 respObj.isScopeFound = true;
	 respObj.SCOPE=scope;
		
	}
	else
	{
		respObj.respCode=3;
		respObj.SCOPE=scope;
		respObj.error="Invalid Scope";
	}

     
    


	//res.respObj= respObj;
	log.info("in validate input :resp OBJ:")
	//console.log(respObj);
*/
	callback(req,respObj);

});
   
}



function tokenSSO(req,res)
{

//res.setHeader("x-access-token","tests" );
	log.info("in token :001");
	var successRespObj={
		token_type:"jwt"

	};
	var errorArr=[
"invalid_request"
,"unauthorized_client"
,"access_denied"
,"unsupported_response_type"
,"invalid_scope"
,"server_error"
,"temporarily_unavailable"
];
	var errorRespObj={
		error : ""
		,error_uri:""
	};

	log.info("in token :002");


	validInputSSO(req, function(req,respObj)
	{
		log.info("AF:001:validInput ");
		//console.log(res.respObj);
		
		var options = {
    method: 'POST',
    uri: 'http://localhost:5000/gpasso/token',
    form: {     		"grantType"     : "password" 
          /*loginService.authorizeSSO({     "grantType"     : "password" */
                      ,'clientId'    : req.getParam('clientId')
                      ,'scope'       : req.getParam('scope')
                      ,'username'    : req.getParam('username')
                      ,'password'    : req.getParam('password')
                      ,'redirectURI' : req.getParam('redirectURI')

                      },
    headers: respObj

		};


console.log('after validInputSSO : options');
console.log(options);

	request(options)
    .then(function (resp) {
        // POST succeeded...
        console.log("Success")
        //console.log(body);

        //"headers":
//"x-powered-by": "Express"
//"x-access-token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJIZWFlcmllIEdTTCIsImF1ZCI6Ind3dy5teXJvb21leHBlbnNlLmNvbSIsImlhdCI6IjkwMG1zIiwiZXhwIjoxNDY1NDA0NDIyfQ.xRXSM51FOtwcWX5keeIdZUIoYnOk1_P3pe3uIJoehzY"
          //res.setHeader("x-access-token" , headers["x-access-token"]);
          //console.log();
         res.setHeader("x-access-token",resp.headers["x-access-token"]);
        res.send(resp.body);
      

    })
    .catch(function (err) {
        // POST failed...

        console.log(err);
        res.send(err);
    });
	
		


	});



}

function authorize(req,res)
{

//res.setHeader("x-access-token","tests" );
	log.info("in token");
	var successRespObj={
		token_type:"jwt"

	};
	var errorArr=[
"invalid_request"
,"unauthorized_client"
,"access_denied"
,"unsupported_response_type"
,"invalid_scope"
,"server_error"
,"temporarily_unavailable"
];
	var errorRespObj={
		error : ""
		,error_uri:""
	};
	authvalidInput(req, function(req,respObj)
	{
		log.info("AF:001:validInput ");
		//console.log(res.respObj);
		
		if (respObj.respCode == 0)
		{

				//var username=req.getParam("username");
				//var password=req.getParam("password");


				//log.info("userName:" + username);
				log.info("tocken:" + respObj.accessToken);
				

				//checkpwd( username,password, function( result,response, logindata ){
						verifyToken(respObj.accessToken, secretkey,function(result,token)
						{

						if(result ==false)
						{

							res.respObj=4;
							res.error="Access Denied";
							log.info("af : 001 : checkpwd");
							//res.statusCode =302;
							//res.end(302,JSON.stringify(res.respObj));
							errorRespObj.error=errorArr[2];
							res.statusCode=302;										
							res.send(JSON.stringify(errorRespObj));

							


						}
						else
						{
							log.info("T:001:Sign Token");

							console.log(token);

							signToken(res,secretkey, function(res){
								//res.statusCode=302;

								res.send(JSON.stringify(successRespObj));	
							});

							

						
						}

					});

		
		}
		else
		{

				if(respObj.isClientIdFound == false)
				{
					errorRespObj.error=errorArr[1];
				}
				else if (respObj.isValidGrantType ==false)
				{
					errorRespObj.error=errorArr[0];
				
				}

				errorRespObj.error=errorArr[3];
							res.statusCode=302;										
							res.send(JSON.stringify(errorRespObj));
							//res.send(JSON.stringify(res.respObj));

		}
		


	});



}


function authorizeSSO(req,res)
{

//res.setHeader("x-access-token","tests" );
	log.info("in token");
	var successRespObj={
		token_type:"jwt"

	};
	var errorArr=[
"invalid_request"
,"unauthorized_client"
,"access_denied"
,"unsupported_response_type"
,"invalid_scope"
,"server_error"
,"temporarily_unavailable"
];
	var errorRespObj={
		error : ""
		,error_uri:""
	};
	authvalidInput(req, function(req,respObj)
	{
		log.info("AF:001:validInput ");
		//console.log(res.respObj);
		
		if (respObj.respCode == 0)
		{

				//var username=req.getParam("username");
				//var password=req.getParam("password");


				//log.info("userName:" + username);
				log.info("tocken:" + respObj.accessToken);
				

				//checkpwd( username,password, function( result,response, logindata ){
						verifyToken(respObj.accessToken, secretkey,function(result,token)
						{

						if(result ==false)
						{

							res.respObj=4;
							res.error="Access Denied";
							log.info("af : 001 : checkpwd");
							//res.statusCode =302;
							//res.end(302,JSON.stringify(res.respObj));
							errorRespObj.error=errorArr[3];
							res.statusCode=302;										
							res.send(JSON.stringify(errorRespObj));

							


						}
						else
						{
							insertLogin(res.locals.BrowserInfo );
							log.info("T:001:Sign Token");

							console.log(token);

							signToken(res,secretkey, function(res){
								//res.statusCode=302;

								res.send(JSON.stringify(successRespObj));	
							});

							

						
						}

					});

		
				
				

	
		}
		else
		{

				if(respObj.isClientIdFound == false)
							{
								errorRespObj.error=errorArr[1];
							}
							else if (respObj.isValidGrantType ==false)
							{
								errorRespObj.error=errorArr[0];
							
							}

				errorRespObj.error=errorArr[3];
							res.statusCode=302;										
							res.send(JSON.stringify(errorRespObj));
							//res.send(JSON.stringify(res.respObj));

		}
		


	});



}


app.post('/gpasso/tokenSSO' , function(req,res) {

	tokenSSO(req,res);
	
}
);

app.post('/gpasso/token' , function(req,res) {

	token(req,res);
	
}
); 
app.get('/token' , function(req,res) {
	
	token(req,res);
}
);


app.get('/gpasso/token' , function(req,res) {
	
	token(req,res);
}
);


app.post('/gpasso/token' , function(req,res) {
	
	token(req,res);
}
);



app.get('/gpasso/authorize' , function(req,res) {
	
	authorize(req,res);
}
);


app.post('/gpasso/authorize' , function(req,res) {
	
	authorize(req,res);
}
);

app.post('/authorize' , function(req,res) {

	authorize(req,res);
	
}
);


app.get('/authorize' , function(req,res) {
	
	authorize(req,res);
}
);
///token


function clientVerifyToken(req,res,next)
{

	log.info("in token");
	var successRespObj={
		token_type:"jwt"

	};
	var errorArr=[
"invalid_request"
,"unauthorized_client"
,"access_denied"
,"unsupported_response_type"
,"invalid_scope"
,"server_error"
,"temporarily_unavailable"
];
	var errorRespObj={
		error : ""
		,error_uri:""
	};

clientValidInput(req, function(req,respObj)
	{
		log.info("AF:001:validInput ");
		//console.log(res.respObj);
		
		if (respObj.respCode == 0)
		{

				//var username=req.getParam("username");
				//var password=req.getParam("password");


				//log.info("userName:" + username);
				log.info("tocken:" + respObj.accessToken);
				

				//checkpwd( username,password, function( result,response, logindata ){
						verifyToken(respObj.accessToken, secretkey,function(result,token)
						{

						if(result ==false)
						{

							res.respObj=4;
							res.error="Access Denied";
							log.info("af : 001 : checkpwd");
							//res.statusCode =302;
							//res.end(302,JSON.stringify(res.respObj));
							errorRespObj.error=errorArr[3];
							res.statusCode=302;										
							res.send(JSON.stringify(errorRespObj));

							


						}
						else
						{
							log.info("T:001:Sign Token");

							console.log(token);

							signToken(res,secretkey, function(res){
								//res.statusCode=302;

								//res.send(JSON.stringify(successRespObj));	
							});


							next(req,res);
							

						
						}

					});

		
				
				

	
		}
		else
		{

				 if (respObj.isValidGrantType ==false)
							{
								errorRespObj.error=errorArr[0];
							
							}

				errorRespObj.error=errorArr[3];
							res.statusCode=302;										
							res.send(JSON.stringify(errorRespObj));
							//res.send(JSON.stringify(res.respObj));

		}
		


	});
;



}
 


console.log(__dirname);
app.use(express.static(__dirname+'/public'));

var server = app.listen(5001, function() {
    console.log('Listening on port %d', server.address().port);
});

